#include <iostream>
#include <fstream>
using namespace std;
ifstream f("abce.in");
ofstream g("abce.out");
class nodbarbore
{
    int f,m,n;
    int *v;
    nodbarbore **s;
public:
    nodbarbore(int x,int f)
    {
        this->f=f;
        this->n=0;
        this->m=x;
        v=new int[2*this->m-1];
        s=new nodbarbore*[2*this->m];
    }
    void inserare(int x)
    {
        int i;
        if (this->f==1)
        {
            for(i=this->n-1;this->v[i]>x    &&  i>=0;i--)
                this->v[i+1]=this->v[i];
            this->v[i+1]=x;
            this->n++;
        }
        else
        {
            for(i=this->n-1;this->v[i]>x    &&  i>=0;i--);
            if(this->s[i+1]->n==2*this->m-1)
            {
                this->copil(i+1,this->s[i+1]);
                if(this->v[i+1]<x)
                    i++;
            }
            this->s[i+1]->inserare(x);
        }
    }
    void copil(int n, nodbarbore *y)
    {
        int i;
        nodbarbore *a=new nodbarbore(y->m,y->f);
        a->n=this->m-1;
        for(i=0;i<this->m-1;i++)
            a->v[i]=y->v[i+this->m];
        if(y->f==0)
        {
            for (i=0;i<this->m;i++)
                a->s[i]=y->s[i+this->m];
        }
        y->n=this->m-1;
        for(i=this->n;i>n+2;i--)
            this->s[i+1]=this->s[i];
        this->s[i+1]=a;
        for(i=this->n-1;i>=n;i--)
            this->v[i+1]=this->v[i];
        this->v[i]=y->v[this->m-1];
        this->n++;
    }
    int cauta(int x)
    {
        int i;
        for(i=0;i<this->n   &&  this->v[i]<x;i++);
        if(this->v[i]==x)
            return 1;
        if(this->f==1)
            return 0;
        return this->s[i]->cauta(x);
    }
    void succesor(int x,int &b)
    {
        int i;
        for (i = 0; i < this->n; i++)
        {
            if(this->v[i]<b && this->v[i]>=x)
                b=this->v[i];
            if (this->f == 0)
               this->s[i]->succesor(x,b);
        }
        if (this->f == 0)
            this->s[i]->succesor(x,b);

    }
    void predecesor(int x,int &b)
    {
        int i,c;
        for (i = 0; i < this->n; i++)
        {
            if(this->v[i]>b && this->v[i]<=x)
                b=this->v[i];
            if (this->f == 0)
                this->s[i]->succesor(x,c);
        }
        if (this->f == 0)
            this->s[i]->succesor(x,b);
    }
    void interval(int x,int y)
    {

        int i;
        for (i = 0; i < n; i++)
        {
            // If this is not leaf, then before printing key[i],
            // traverse the subtree rooted with child C[i].
            if (this->f == 0)
                this->s[i]->interval(x,y);
            if(this->v[i]>x    &&  this->v[i]<y)
                cout << this->v[i]<<' ';
        }

        // Print the subtree rooted with last child
        if (this->f==0)
            this->s[i]->interval(x,y);
    }
    friend class barbor;
};
class barbor
{
    nodbarbore *rad;
    int m;
public:
    barbor()
    {
        this->rad=NULL;
        this->m=50;
    }
    int search(int x)
    {
        if(this->rad==NULL)
            return 0;
        else
            return this->rad->cauta(x);
    }
    void insetare(int x) {
        int i = 0;
        nodbarbore *w;
        if (this->rad == NULL) {
            this->rad = new nodbarbore(this->m, 1);
            this->rad->v[0] = x;
            this->rad->n = 1;
        } else {
            if (this->rad->n == 2 * this->m - 1) {
                w = new nodbarbore(this->m, 1);
                w->s[0] = this->rad;
                w->copil(0, this->rad);
                if (w->v[0] < x)
                    i++;
                w->s[i]->inserare(x);
                this->rad = w;
            } else
                this->rad->inserare(x);
        }
    }
        int succesor(int x)
        {
            int b=2147483647;
            if(this->rad!=NULL)
            {
                this->rad->succesor(x,b);
                if (b==2147483647)
                    return -1;
                return b;
            }

            return -1;
        }
        int predecesor(int x)
        {
        int b=-2147483648;
        if(this->rad!=NULL)
        {
            this->rad->predecesor(x,b);
            if(b==-2147483648)
                return -1;
            return b;
        }
        return -1;
        }
        void interval(int x,int y)
        {
        if(this->rad!=NULL)
            return this->rad->interval(x,y);
        }

};
int main()
{
    int i,n,x,o,p;
    ifstream f("abce.in");
    ofstream g("abce.out");
    barbor a;
    f>>n;
    for(i=0;i<n;i++)
    {
        f>>x>>o;
        if(x==1)
            a.insetare(o);
        else
        if(x==3)
            g<<a.search(o)<<endl;
        else
        if (x==4)
            g<<a.succesor(o)<<endl;
        else
        if(x==5)
            g<<a.predecesor(o)<<endl;
        else
        {
            f>>p;
            a.interval(o,p);
        }
    }
    f.close();
    g.close();
    return 0;
}
